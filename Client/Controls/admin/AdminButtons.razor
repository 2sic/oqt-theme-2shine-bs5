@namespace Oqtane.Themes.Controls
@using Microsoft.Extensions.Localization
@inherits ThemeControlBase
@inject NavigationManager NavigationManager
@inject IUserService UserService
@inject IModuleDefinitionService ModuleDefinitionService
@inject IThemeService ThemeService
@inject IModuleService ModuleService
@inject IPageService PageService
@inject IPageModuleService PageModuleService
@inject ILogService logger
@inject ISettingService SettingService
@inject IStringLocalizer<ControlPanel> Localizer
@inject IStringLocalizer<SharedResources> SharedLocalizer

@if (UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, PageState.Page.Permissions) || (PageState.Page.IsPersonalizable && PageState.User != null && UserSecurity.IsAuthorized(PageState.User, RoleNames.Registered)))
{
    if (PageState.EditMode)
    {
        <a class="to-shine-ui-buttons" data-bs-toggle="button" aria-pressed="true" autocomplete="off" @onclick="(async () => await ToggleEditMode(PageState.EditMode))">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                <path d="M7.127 22.562l-7.127 1.438 1.438-7.128 5.689 5.69zm1.414-1.414l11.228-11.225-5.69-5.692-11.227 
                    11.227 5.689 5.69zm9.768-21.148l-2.816 2.817 5.691 5.691 2.816-2.819-5.691-5.689z"/>
            </svg>
        </a>
    }
    else
    {
        <a class="to-shine-ui-buttons" data-bs-toggle="button" aria-pressed="false" autocomplete="off" @onclick="(async () => await ToggleEditMode(PageState.EditMode))">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                <path d="M7.127 22.562l-7.127 1.438 1.438-7.128 5.689 5.69zm1.414-1.414l11.228-11.225-5.69-5.692-11.227 
                    11.227 5.689 5.69zm9.768-21.148l-2.816 2.817 5.691 5.691 2.816-2.819-5.691-5.689z"/>
            </svg>
        </a>
    }
}

@if (UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, PageState.Page.Permissions))
{
    <a class="to-shine-ui-buttons" data-bs-toggle="offcanvas" data-bs-target="#offcanvasControlPanel" aria-controls="offcanvasControlPanel">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
            <path d="M24 13.616v-3.232c-1.651-.587-2.694-.752-3.219-2.019v-.001c-.527-1.271.1-2.134.847-3.707l-2.285-2.285c-1.561.742-2.433 
                1.375-3.707.847h-.001c-1.269-.526-1.435-1.576-2.019-3.219h-3.232c-.582 1.635-.749 2.692-2.019 3.219h-.001c-1.271.528-2.132-.098-3.707-.847l-2.285
                2.285c.745 1.568 1.375 2.434.847 3.707-.527 1.271-1.584 1.438-3.219 2.02v3.232c1.632.58 2.692.749 3.219 2.019.53 1.282-.114 2.166-.847 3.707l2.285
                2.286c1.562-.743 2.434-1.375 3.707-.847h.001c1.27.526 1.436 1.579 2.019 3.219h3.232c.582-1.636.75-2.69 2.027-3.222h.001c1.262-.524 2.12.101 
                3.698.851l2.285-2.286c-.744-1.563-1.375-2.433-.848-3.706.527-1.271 1.588-1.44 3.221-2.021zm-12 2.384c-2.209 0-4-1.791-4-4s1.791-4 4-4 4 1.791 4 4-1.791 4-4 4z"/>
        </svg>
    </a>
}

@code{
	private bool _deleteConfirmation = false;
	private List<string> _categories = new List<string>();
	private List<ModuleDefinition> _allModuleDefinitions;
	private List<ModuleDefinition> _moduleDefinitions;
	private List<Page> _pages = new List<Page>();
	private List<Module> _modules = new List<Module>();
	private List<ThemeControl> _containers = new List<ThemeControl>();
	private string _category = "Common";

	protected string PageId { get; private set; } = "-";
	protected string ModuleId { get; private set; } = "-";
	protected string ModuleType { get; private set; } = "new";
	protected string ModuleDefinitionName { get; private set; } = "-";

	protected string Category
	{
		get => _category;
		private set
		{
			if (_category != value)
			{
				_category = value;
				_moduleDefinitions = _allModuleDefinitions.Where(item => item.Categories.Contains(Category)).ToList();
				ModuleDefinitionName = "-";
				Message = "";
				StateHasChanged();
				_ = UpdateSettingsAsync();
			}
		}
	}

	protected string Pane
	{
		get => _pane;
		private set
		{
			if (_pane != value)
			{
				_pane = value;
				_ = UpdateSettingsAsync();
			}
		}
	}

	protected string Title { get; private set; } = "";
	protected string ContainerType { get; private set; } = "";
	protected string Visibility { get; private set; } = "edit";
	protected string Message { get; private set; } = "";

	[Parameter]
	public string ButtonClass { get; set; } = "btn-outline-secondary";

	[Parameter]
	public string ContainerClass { get; set; } = "offcanvas offcanvas-end";

	[Parameter]
	public string HeaderClass { get; set; } = "offcanvas-header";

	[Parameter]
	public string BodyClass { get; set; } = "offcanvas-body overflow-auto";

	[Parameter]
	public bool ShowLanguageSwitcher { get; set; } = true;


	protected override async Task OnParametersSetAsync()
	{
		if (UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, PageState.Page.Permissions))
		{
			_pages?.Clear();

			foreach (Page p in PageState.Pages)
			{
				if (UserSecurity.IsAuthorized(PageState.User, PermissionNames.View, p.Permissions))
				{
					_pages.Add(p);
				}
			}
			await LoadSettingsAsync();

			var themes = await ThemeService.GetThemesAsync();
			_containers = ThemeService.GetContainerControls(themes, PageState.Page.ThemeType);
			ContainerType = PageState.Site.DefaultContainerType;
			_allModuleDefinitions = await ModuleDefinitionService.GetModuleDefinitionsAsync(PageState.Site.SiteId);
			_moduleDefinitions = _allModuleDefinitions.Where(item => item.Categories.Contains(Category)).ToList();
			_categories = _allModuleDefinitions.SelectMany(m => m.Categories.Split(',')).Distinct().ToList();
		}
	}

	private void CategoryChanged(ChangeEventArgs e)
	{
		Category = (string)e.Value;
	}

	private void ModuleChanged(ChangeEventArgs e)
	{
		ModuleDefinitionName = (string)e.Value;
		if (ModuleDefinitionName != "-")
		{
			var moduleDefinition = _moduleDefinitions.FirstOrDefault(item => item.ModuleDefinitionName == ModuleDefinitionName);
			Message = "<div class=\"alert alert-info mt-2 text-center\" role=\"alert\">" + moduleDefinition.Description + "</div>";
		}
		else
		{
			Message = "";
		}
		StateHasChanged();
	}

	private void PageChanged(ChangeEventArgs e)
	{
		PageId = (string)e.Value;
		if (PageId != "-")
		{
			_modules = PageState.Modules
				.Where(module => module.PageId == int.Parse(PageId)
									&& !module.IsDeleted
									&& UserSecurity.IsAuthorized(PageState.User, PermissionNames.View, module.Permissions))
				.ToList();
		}
		ModuleId = "-";
		StateHasChanged();
	}

	private async Task AddModule()
	{
		if (UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, PageState.Page.Permissions))
		{
			if ((ModuleType == "new" && ModuleDefinitionName != "-") || (ModuleType != "new" && ModuleId != "-"))
			{
				if (ModuleType == "new")
				{
					Module module = new Module();
					module.SiteId = PageState.Site.SiteId;
					module.PageId = PageState.Page.PageId;
					module.ModuleDefinitionName = ModuleDefinitionName;
					module.AllPages = false;

					List<PermissionString> permissions = UserSecurity.GetPermissionStrings(PageState.Page.Permissions);
					if (Visibility == "view")
					{
						// set module view permissions to page view permissions
						permissions.Find(p => p.PermissionName == PermissionNames.View).Permissions = permissions.Find(p => p.PermissionName == PermissionNames.View).Permissions;
					}
					else
					{
						// set module view permissions to page edit permissions
						permissions.Find(p => p.PermissionName == PermissionNames.View).Permissions = permissions.Find(p => p.PermissionName == PermissionNames.Edit).Permissions;
					}
					module.Permissions = UserSecurity.SetPermissionStrings(permissions);

					module = await ModuleService.AddModuleAsync(module);
					ModuleId = module.ModuleId.ToString();
				}

				var pageModule = new PageModule
                {
                    PageId = PageState.Page.PageId,
                    ModuleId = int.Parse(ModuleId),
                    Title = Title
                };
				if (pageModule.Title == "")
				{
					if (ModuleType == "new")
					{
						pageModule.Title = _moduleDefinitions.FirstOrDefault(item => item.ModuleDefinitionName == ModuleDefinitionName)?.Name;
					}
					else
					{
						pageModule.Title = _modules.FirstOrDefault(item => item.ModuleId == int.Parse(ModuleId))?.Title;
					}
				}

				pageModule.Pane = Pane;
				pageModule.Order = int.MaxValue;
				pageModule.ContainerType = ContainerType;

				if (pageModule.ContainerType == PageState.Site.DefaultContainerType)
				{
					pageModule.ContainerType = "";
				}

				await PageModuleService.AddPageModuleAsync(pageModule);
				await PageModuleService.UpdatePageModuleOrderAsync(pageModule.PageId, pageModule.Pane);

				Message = $"<div class=\"alert alert-success mt-2 text-center\" role=\"alert\">{Localizer["Success.Page.ModuleAdd"]}</div>";
				Title = "";
				NavigationManager.NavigateTo(NavigateUrl());
            }
            else
            {
                Message = $"<div class=\"alert alert-warning mt-2 text-center\" role=\"alert\">{Localizer["Message.Require.ModuleSelect"]}</div>";
            }
        }
        else
        {
            Message = $"<div class=\"alert alert-error mt-2 text-center\" role=\"alert\">{Localizer["Error.Authorize.No"]}</div>";
        }
    }

    private async Task ToggleEditMode(bool EditMode)
    {
        if (UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, PageState.Page.Permissions))
        {
            if (EditMode)
            {
                PageState.EditMode = false;
            }
            else
            {
                PageState.EditMode = true;
            }

            NavigationManager.NavigateTo(NavigateUrl(PageState.Page.Path, "edit=" + ((PageState.EditMode) ? "1" : "0")));
        }
        else
        {
            if (PageState.Page.IsPersonalizable && PageState.User != null)
            {
                await PageService.AddPageAsync(PageState.Page.PageId, PageState.User.UserId);
                PageState.EditMode = true;
                NavigationManager.NavigateTo(NavigateUrl(PageState.Page.Path, "edit=" + ((PageState.EditMode) ? "1" : "0")));
            }
        }
    }

    private void Navigate(string location)
    {
        //HideControlPanel();
        Module module;
        switch (location)
        {
            case "Admin":
                // get admin dashboard moduleid
                module = PageState.Modules.FirstOrDefault(item => item.ModuleDefinitionName == Constants.AdminDashboardModule);

                if (module != null)
                {
                    NavigationManager.NavigateTo(EditUrl(PageState.Page.Path, module.ModuleId, "Index", ""));
                }

                break;
            case "Add":
            case "Edit":
                string url = "";
                // get page management moduleid
                module = PageState.Modules.FirstOrDefault(item => item.ModuleDefinitionName == Constants.PageManagementModule);

                if (module != null)
                {
                    switch (location)
                    {
                        case "Add":
                            url = EditUrl(PageState.Page.Path, module.ModuleId, location, "cp=" + PageState.Page.PageId);
                            break;
                        case "Edit":
                            url = EditUrl(PageState.Page.Path, module.ModuleId, location, "id=" + PageState.Page.PageId.ToString() + "&cp=" + PageState.Page.PageId);
                            break;
                    }
                }

                if (url != "")
                {
                    NavigationManager.NavigateTo(url);
                }

                break;
        }
    }

    private async void Publish(string action)
    {
        if (UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, PageState.Page.Permissions))
        {
            List<PermissionString> permissions;

            // publish/unpublish page
            var page = PageState.Page;
            permissions = UserSecurity.GetPermissionStrings(page.Permissions);
            foreach (var permissionstring in permissions)
            {
                if (permissionstring.PermissionName == PermissionNames.View)
                {
                    List<string> ids = permissionstring.Permissions.Split(';').ToList();
                    switch (action)
                    {
                        case "publish":
                            if (!ids.Contains(RoleNames.Everyone)) ids.Add(RoleNames.Everyone);
                            if (!ids.Contains(RoleNames.Registered)) ids.Add(RoleNames.Registered);
                            break;
                        case "unpublish":
                            ids.Remove(RoleNames.Everyone);
                            ids.Remove(RoleNames.Registered);
                            break;
                    }
                    permissionstring.Permissions = string.Join(";", ids.ToArray());
                }
            }
            page.Permissions = UserSecurity.SetPermissionStrings(permissions);
            await PageService.UpdatePageAsync(page);
            NavigationManager.NavigateTo(NavigateUrl(PageState.Page.Path, true));
        }
    }

    private void ConfirmDelete()
    {
        _deleteConfirmation = !_deleteConfirmation;
        StateHasChanged();
    }

    private async Task DeletePage()
    {
        ConfirmDelete();

        var page = PageState.Page;
        try
        {
            if (page.UserId == null)
            {
                page.IsDeleted = true;
                await PageService.UpdatePageAsync(page);
                await logger.Log(page.PageId, null, PageState.User.UserId, GetType().AssemblyQualifiedName, "ControlPanel", LogFunction.Delete, LogLevel.Information, null, "Page Deleted {Page}", page);
                NavigationManager.NavigateTo(NavigateUrl(""));
            }
            else // personalized page
            {
                await PageService.DeletePageAsync(page.PageId);
                await logger.Log(page.PageId, null, PageState.User.UserId, GetType().AssemblyQualifiedName, "ControlPanel", LogFunction.Delete, LogLevel.Information, null, "Page Deleted {Page}", page);
                NavigationManager.NavigateTo(NavigateUrl());
            }
        }
        catch (Exception ex)
        {
            await logger.Log(page.PageId, null, PageState.User.UserId, GetType().AssemblyQualifiedName, "ControlPanel", LogFunction.Delete, LogLevel.Information, ex, "Page Deleted {Page} {Error}", page, ex.Message);
        }
    }

    private string settingCategory = "CP-category";
    private string settingPane = "CP-pane";
    private string _pane = "";

    private async Task LoadSettingsAsync()
    {
        Dictionary<string, string> settings = await SettingService.GetUserSettingsAsync(PageState.User.UserId);
        _category = SettingService.GetSetting(settings, settingCategory, "Common");
        var pane = SettingService.GetSetting(settings, settingPane, "");
        _pane = PageState.Page.Panes.Contains(pane) ? pane : PaneNames.Admin;
    }

    private async Task UpdateSettingsAsync()
    {
        Dictionary<string, string> settings = await SettingService.GetUserSettingsAsync(PageState.User.UserId);
        SettingService.SetSetting(settings, settingCategory, _category);
        SettingService.SetSetting(settings, settingPane, _pane);
        await SettingService.UpdateUserSettingsAsync(settings, PageState.User.UserId);
    }

}
